[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "eel",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "eel",
        "description": "eel",
        "detail": "eel",
        "documentation": {}
    },
    {
        "label": "scraper",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "scraper",
        "description": "scraper",
        "detail": "scraper",
        "documentation": {}
    },
    {
        "label": "JsonManager",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "JsonManager",
        "description": "JsonManager",
        "detail": "JsonManager",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "write_json",
        "kind": 2,
        "importPath": "JsonManager",
        "description": "JsonManager",
        "peekOfCode": "def write_json(data, file_name=JSON_FILE):\n    '''\nwrites data to json file\n:param data: data you wish to write\n:param file_name: json file name\n'''\n    with open(file_name, 'w') as f:\n        json.dump(data, f, indent=2)\ndef search_json(ticker, file_name=JSON_FILE):\n    '''",
        "detail": "JsonManager",
        "documentation": {}
    },
    {
        "label": "search_json",
        "kind": 2,
        "importPath": "JsonManager",
        "description": "JsonManager",
        "peekOfCode": "def search_json(ticker, file_name=JSON_FILE):\n    '''\n    This will seach the json file for the ticker\n    :param ticker: is the stock ticker you want to search for in the json file\n    '''\n    # opens and reads json stock info list\n    with open(file_name) as f:\n        data = json.load(f)\n        stock_information = data['stock_info']\n    # searches for the stock ticker that you want to remove",
        "detail": "JsonManager",
        "documentation": {}
    },
    {
        "label": "remove_stock",
        "kind": 2,
        "importPath": "JsonManager",
        "description": "JsonManager",
        "peekOfCode": "def remove_stock(ticker, file_name=JSON_FILE):\n    '''\nthis will seach for a stock ticker to remove from the json\nstock info list\n'''\n    # opens and reads json stock info list\n    with open(file_name) as f:\n        data = json.load(f)\n        stock_information = data['stock_info']\n    # searches for the stock ticker that you want to remove",
        "detail": "JsonManager",
        "documentation": {}
    },
    {
        "label": "add_stock",
        "kind": 2,
        "importPath": "JsonManager",
        "description": "JsonManager",
        "peekOfCode": "def add_stock(stock, file_name=JSON_FILE):\n    '''\nthis function will take in a scraper object of a stock and send th information to the json file to be store\n:param stock: scraper object with data scraped stored in it\n:param file_name: is where the data from the scraper object will be written\n'''\n    with open(file_name) as json_file:\n        data = json.load(json_file)\n        temp = data['stock_info']\n        info = {'stock_ticker': stock.stock_ticker, 'price': stock.current_price, 'percent_change': stock.percent_change,",
        "detail": "JsonManager",
        "documentation": {}
    },
    {
        "label": "getStocks",
        "kind": 2,
        "importPath": "JsonManager",
        "description": "JsonManager",
        "peekOfCode": "def getStocks(file_name=JSON_FILE):\n    with open(file_name) as f:\n        data = json.load(f)\n        stock_information = data['stock_info']\n        return stock_information",
        "detail": "JsonManager",
        "documentation": {}
    },
    {
        "label": "JSON_FILE",
        "kind": 5,
        "importPath": "JsonManager",
        "description": "JsonManager",
        "peekOfCode": "JSON_FILE = 'web/stocks.json'\ndef write_json(data, file_name=JSON_FILE):\n    '''\nwrites data to json file\n:param data: data you wish to write\n:param file_name: json file name\n'''\n    with open(file_name, 'w') as f:\n        json.dump(data, f, indent=2)\ndef search_json(ticker, file_name=JSON_FILE):",
        "detail": "JsonManager",
        "documentation": {}
    },
    {
        "label": "grabInput",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def grabInput(input):\n    '''\nthis function is used to send front end button input to the backend\n:param input: user input from front end\n'''\n    user_input_que.append(input)\ndef loadData():\n    '''\n    this function will load most recent data for the saved stocks\n    '''",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "loadData",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def loadData():\n    '''\n    this function will load most recent data for the saved stocks\n    '''\n    old_stock_info = JsonManager.getStocks()\n    old_stock_tickers = []\n    # saves old stock tickers and then removes old data\n    for stock in old_stock_info:\n        old_stock_tickers.append(stock['stock_ticker'])\n        JsonManager.remove_stock(stock['stock_ticker'])",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "user_input_que",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "user_input_que = []\n@eel.expose\ndef grabInput(input):\n    '''\nthis function is used to send front end button input to the backend\n:param input: user input from front end\n'''\n    user_input_que.append(input)\ndef loadData():\n    '''",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Scraper",
        "kind": 6,
        "importPath": "scraper",
        "description": "scraper",
        "peekOfCode": "class Scraper:\n    stock_ticker = None\n    # variables that keep track of stock prices and change\n    current_price = None\n    percent_change = None\n    def __init__(self, stock_ticker):\n        self.header_arr = []\n        self.articles_info = []\n        self.link_to_article = []\n        self.stock_ticker = stock_ticker.upper()",
        "detail": "scraper",
        "documentation": {}
    },
    {
        "label": "searchError",
        "kind": 2,
        "importPath": "scraper",
        "description": "scraper",
        "peekOfCode": "def searchError(ticker):\n    '''\n    this function will determine if you can search for an entered ticker\n    :param ticker: this is the ticker that it will search for\n    :return: Will return True if it can't find the stock and false if it can\n    '''\n    # creates the link to yahoo\n    yahoo_search = \"https://finance.yahoo.com/quote/{tick}?p={tick}&.tsrc=fin-srch\".format(\n        tick=ticker.upper())\n    html_info = requests.get(yahoo_search).text",
        "detail": "scraper",
        "documentation": {}
    }
]